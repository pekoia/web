{"version":3,"file":"component---src-templates-homepage-js-7765a23816e216a4e1a5.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/templates/homepage.js"],"sourcesContent":["\nimport React, { useEffect, useContext, useState, useRef, lazy, Suspense } from \"react\"\nimport { graphql } from 'gatsby'\nimport Box from '@mui/material/Box'\nimport { ThemeProvider, StyledEngineProvider } from '@mui/material/styles';\nimport '../components/layout'\nimport { AuthContext } from \"../context/general\"\nimport Layout from \"../components/layout\"\nimport { fetchTransactions, fetchNotifications, fetchCredits, greet } from '../helpers/fetchers'\nimport Seo from \"../components/seo\"\nimport MainImage from '../pagesComponents/homepage/mainImage'\nimport MainFilter from '../pagesComponents/homepage/mainFilter'\nimport ConferencesSection from '../pagesComponents/homepage/conferencesSection'\nimport CyclesSection from '../pagesComponents/homepage/cyclesSection'\nimport SecondPhoto from '../pagesComponents/homepage/secondPhoto'\nimport ReplaySection from '../pagesComponents/homepage/replaySection'\nimport { Location } from '@reach/router'\nimport queryString from 'query-string'\nimport PropTypes from \"prop-types\"\nimport scrollTo from 'gatsby-plugin-smoothscroll'\nimport publicIp from 'public-ip'\nimport {DEBUG} from '../buildSpecs'\n\n\n\nimport FrontOfficeTheme, { sxStyle } from '../style/globalTheme'\n\n// import Calendar from './components/homepage/calendar'\n\n const Calendar = lazy(() => import('../pagesComponents/homepage/calendar'))\n\n\nconst title = 'conférences, webinars, cours en ligne pour tous avec Pekoia'\nconst description = \"Pekoia est une université digitale ouverte à tous, qui permet d’organiser des rencontres (conférences à distance, webinars, cours en ligne) entre des conférenciers et tous ceux qui veulent apprendre sur leur temps libre (histoire de l’art, développement personnel, histoire, sciences ...\"\n\n\n\n\nconst withLocation = ComponentToWrap => props => (\n  <Location>\n      {({ location, navigate }) => (\n          <ComponentToWrap\n              {...props}\n              location={location}\n              navigate={navigate}\n              search={location.search ? queryString.parse(location.search) : {}}\n          />\n      )}\n  </Location>\n)\n\n\nconst CustomQueryStringComponent = ({ search, data }) => {\n  return (<IndexPage search={search} data={data} />)\n}\nCustomQueryStringComponent.propTypes = {\n  search: PropTypes.object,\n}\n\nconst IndexPage = ({ data, search }) => {\n\n\n\n  if (DEBUG){\n\n    if (DEBUG == 1)\n      return (<Box>DEBUG MODE</Box>)\n\n\n  }\n \n\n\n\n\n\n    const InsideWrapper = ({data}) =>{\n\n       \n\n      const { authState, authActions } = useContext(AuthContext)\n      const [cognitoId, setCognitoId] = useState(null)\n      const [isMounted, setIsMounted] = useState(false)\n      const [hasNotifications, setHasNotifications] = useState(false)\n      const [ssrTest, setSsrTest] = useState(false)\n\n      useEffect(() => {\n\n    \n\n        if (!isMounted)\n          setIsMounted(true)\n    \n    \n        if (authState?.user && authState.user.cognitoId != cognitoId) {\n    \n    \n    \n          \n    \n    \n          const cognitoId = authState.user.cognitoId\n          fetchTransactions(cognitoId, authActions.setTransactions, authActions.setCards, authActions.set_HasNeverBought, authActions.appendTransactions, authActions.setCredits, authActions.setReplays, authActions.appendReplays)\n          fetchCredits(cognitoId, authActions.setCredits)\n          setCognitoId(authState.user.cognitoId)\n        }\n        if (authState?.user?.id && !hasNotifications) {\n    \n          const clientId = authState.user.id\n          fetchNotifications(clientId, authActions.setNotifications)\n          setHasNotifications(true)\n    \n        }\n    \n    \n      }, [authState])\n    \n    \n      \n    \n      useEffect(() => {\n    \n        let timer\n    \n        if (search.position == 'newsletter' )\n        {\n          const timer = setTimeout(() => {\n            console.log('@REF')\n            console.log(search)\n            window.scrollTo(0,2300)\n           }, 50);\n         }\n    \n         \n         return () => clearTimeout(timer);\n        }\n    \n        \n    \n       ,[]);\n\n       \n\n      const newsletterRef = useRef(null)\n      const isSSR = typeof window === \"undefined\"\n\n\n     \n\n      if (!isMounted)\n        return null\n\n\n      return(<Layout data={data} ssrTest={ssrTest} setSsrTest={setSsrTest}>\n        <Seo title={data.markdownRemark.frontmatter.title} description={description} image={data.pageImage.gatsbyImageData.images.fallback.src} />\n      \n        <Box >\n          \n          <MainImage data={data} />\n        </Box>\n        <Box  sx={sxStyle} marginTop=\"60px\" >\n          <MainFilter data={data} isMounted={isMounted} ssrTest={ssrTest} />\n         \n          <ConferencesSection data={data} isMounted={isMounted} />\n        </Box>\n        <Box sx={sxStyle}>\n         \n            <CyclesSection data={data} />\n            <ReplaySection data={data} />\n          <SecondPhoto newsletterRef={newsletterRef} data={data}/>\n        \n\n         \n          \n  \n          \n        </Box>\n  \n  \n        <Box sx={sxStyle} marginTop=\"80px\" >\n          {!isSSR && <Suspense fallback={<Box color=\"white\">Loading...</Box>}>\n            \n            <Calendar data={data} />\n          </Suspense>}\n  \n        </Box>\n      </Layout>)\n    }\n\n\n  return (\n    <StyledEngineProvider injectFirst>\n      <ThemeProvider theme={FrontOfficeTheme}>\n        <InsideWrapper data={data}/>\n      </ThemeProvider>\n    </StyledEngineProvider>\n  );\n\n\n}\n\nexport default withLocation(CustomQueryStringComponent)\n\n\n\n\n\n\n\nexport const query = graphql`\n query  ($slug: String!){\n\n  phoneImage: imageSharp(original: {src: {regex: \"/phone/\"}}) {\n    gatsbyImageData(\n      height: 1000\n      quality: 95\n      placeholder: BLURRED\n      transformOptions: {cropFocus: ATTENTION}\n      )\n  }\n\n     pageImage: imageSharp(original: {src: {regex: $slug}}) {\n     gatsbyImageData(\n       width: 1200\n       placeholder: BLURRED\n     )\n   }\n\n      markdownRemark (fields: {slug: {eq: $slug}})  {\n     frontmatter {\n       slug\n       title\n       key\n     }\n\n   }\n\n  ogImage: imageSharp(original: {src: {regex: \"/main_og_image/\"}}) {\n    gatsbyImageData(\n      width: 1000\n      height: 630\n      quality: 80\n      placeholder: BLURRED\n      transformOptions: {cropFocus: ATTENTION}\n      )\n  }\n\n  replays: allDbEvent(filter: {replayStatus: {eq: \"AVAILABLE\"}}) {\n    edges {\n      node {\n        categories\n        categoriesCode\n        categoriesCode\n        date\n        replayStatus\n        replayCategory\n        title1\n        title2\n        imageKey\n        imageETag500\n        fields {\n          slug\n        }\n        children {\n          ... on DBFormateur {\n            nom\n            prenom\n            imageId\n            children {\n              ... on ImageSharp {\n                id\n                gatsbyImageData\n                original {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  mainImage: imageSharp(original: {src: {regex: \"/fo_wall/\"}}) {\n    gatsbyImageData\n  }  \n\n  pageImages:  allImageSharp(\n    filter: {original: {src: {regex: \"/photo/\"}}}\n  ) {\n    edges {\n      node {\n        gatsbyImageData(\n          width: 800\n          quality: 90\n          placeholder: BLURRED\n          transformOptions: {cropFocus: ATTENTION}\n          )\n      }\n    }\n  }\n\n\n\n\n  portraits : allImageSharp(filter: {original: {src: {regex: \"/portrait/\"}}}) {\n    edges {\n      node {\n        \n        original {\n          src\n        }\n        \n      }\n    }\n  }\n  site {\n    buildTime\n  }\n\n\n  site {\n      siteMetadata {\n        title\n        description\n        author\n        image\n        url\n      }\n    }\n  \n\n\n\n\n\n  markdowns: allMarkdownRemark (filter: {frontmatter: {color: {ne: \"\"}}}){\n    nodes {\n      html\n      frontmatter {\n        title\n        key\n        type\n        position\n        color\n        slug\n      }\n    }\n  }\n\n  cycles: allDbCycle (filter: {status: {eq: \"PUBLISHED\"}}) {\n    edges {\n      node {\n        title\n        status\n        imageKey\n        imageETag500\n        children {\n          ... on ImageSharp {\n            original{\n              src\n            }\n\n        \n      \n          }\n    \n        }\n        formateur: children {\n          ... on DBFormateur {\n            nom\n            prenom\n            ... on DBFormateur {\n              id\n            nom\n          prenom\n          sanboxLemonwayId\n          hashList\n          intro\n          fields{\n              formateurId\n              slug\n            }\n          children {\n              ...on ImageSharp {\n              gatsbyImageData\n                original{\n  \n              src}\n              }\n            }\n          }\n\n        \n      \n          }\n    \n        }\n        events: children {\n\n          ...on DBEvent {\n          title1\n          title2\n          date\n          }\n        }\n        fields{\n          cycleId\n          slug\n        }\n      }\n    }\n  }\n\n\n\n\n\n  events: allDbEvent\n  {\n      edges {\n        node {\n                  title1\n                  title2\n                  format\n                  outil\n                  imageKey\n                  imageETag500\n                  categoriesCode\n                  formateurId\n                  nbMax\n                  nbReserved\n                  imageETag300\n                  attendingNb\n                  date\n                  state\n                  format\n                  children {\n                    ... on DBFormateur {\n                      nom\n                      prenom\n                      state\n                      imageId\n                \n                    }\n                    ... on ImageSharp {\n                      original{\n                        src\n                      }\n                \n                \n                    }\n              \n                  }\n                  fields\n                    {\n                      eventId\n                      slug\n                    }\n\t\t\t\t\t\t}\n      \t\t}\n  }\n }\n`\n\n\n\n\n"],"names":["ComponentToWrap","Calendar","lazy","IndexPage","data","search","DEBUG","___EmotionJSX","Box","StyledEngineProvider","injectFirst","ThemeProvider","theme","FrontOfficeTheme","useContext","AuthContext","authState","authActions","useState","cognitoId","setCognitoId","isMounted","setIsMounted","hasNotifications","setHasNotifications","ssrTest","setSsrTest","useEffect","user","fetchTransactions","setTransactions","setCards","set_HasNeverBought","appendTransactions","setCredits","setReplays","appendReplays","fetchCredits","id","clientId","fetchNotifications","setNotifications","position","setTimeout","console","log","window","scrollTo","clearTimeout","timer","newsletterRef","useRef","isSSR","Layout","Seo","title","markdownRemark","frontmatter","description","image","pageImage","gatsbyImageData","images","fallback","src","MainImage","sx","sxStyle","marginTop","MainFilter","ConferencesSection","CyclesSection","ReplaySection","SecondPhoto","Suspense","color","props","Location","location","navigate","queryString"],"sourceRoot":""}